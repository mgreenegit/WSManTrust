#---------------------------------#
#      environment configuration  #
#---------------------------------#
os: Unstable
version: 0.1.{build}.0
install:
  - cinst -y pester
environment:
  APIKEY:
    secure: Ne1LPTeW3a/X9oC7CRnEitE+vNfGssb1rnaP8Uq74/HHGbZ5XkqLg/IQKRdDGnlm

#---------------------------------#
#      build configuration        #
#---------------------------------#

build: false

#---------------------------------#
#      test configuration         #
#---------------------------------#

test_script:
    - ps: |
        $testResultsFile = ".\TestsResults.xml"
        $res = Invoke-Pester -OutputFormat NUnitXml -OutputFile $testResultsFile -PassThru
        (New-Object 'System.Net.WebClient').UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path $testResultsFile))
        if ($res.FailedCount -gt 0) {
            throw "$($res.FailedCount) tests failed."
        }

#---------------------------------#
#      deployment configuration   #
#---------------------------------#

# scripts to run before deployment

# NOTE The manifest file should be dynamically identified, as should the module version data in the file
before_deploy:
  - ps: |
      # Update Manifest File
      $stagingDirectory = (Resolve-Path ..).Path
      $manifest = Join-Path $pwd 'WSManTrust.psd1'
      (Get-Content $manifest -Raw).Replace("0.1.0.0", $env:APPVEYOR_BUILD_VERSION) | Out-File $manifest
      $confirmationPage = 'http://www.microsoft.com/en-us/download/' +  $((invoke-webrequest 'http://aka.ms/wmf5latest' -UseBasicParsing).links | ? Class -eq 'mscom-link download-button dl' | % href)
      $directURL = (invoke-webrequest $confirmationPage -UseBasicParsing).Links | ? Class -eq 'mscom-link' | ? href -match "WindowsBlue-KB\d\d\d\d\d\d\d-x64.msu" | % href | select -first 1
      $download = invoke-webrequest $directURL -OutFile $env:Temp\wmf5latest.msu
      if (test-path $env:Temp\wmf5latest.msu) {
        start -wait $env:Temp\wmf5latest.msu -argumentlist '/quiet /norestart'
      }
      else { throw 'the update file is not available at the specified location' }
      Remove-Item $env:Temp\wmf5latest.msu
      Restart-Computer

#---------------------------------#
#      after build                #
#---------------------------------#

on_success:
  - ps: |
      Import-Module PackageManagement
      Get-Command -module PackageManagement
      #Publish-Module -NuGetAPIKey $env:APIKEY -Path $pwd -whatif